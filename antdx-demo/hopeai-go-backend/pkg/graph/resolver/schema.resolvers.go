package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/hopeai/go-backend/pkg/graph/generated"
	"github.com/hopeai/go-backend/pkg/graph/model"
)

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, input model.PatientInput) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: CreatePatient - createPatient"))
}

// UpdatePatient is the resolver for the updatePatient field.
func (r *mutationResolver) UpdatePatient(ctx context.Context, id string, input model.PatientInput) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: UpdatePatient - updatePatient"))
}

// DeletePatient is the resolver for the deletePatient field.
func (r *mutationResolver) DeletePatient(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePatient - deletePatient"))
}

// UpdateEvaluationDraft is the resolver for the updateEvaluationDraft field.
func (r *mutationResolver) UpdateEvaluationDraft(ctx context.Context, id string, draft string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: UpdateEvaluationDraft - updateEvaluationDraft"))
}

// CreateClinicalQuery is the resolver for the createClinicalQuery field.
func (r *mutationResolver) CreateClinicalQuery(ctx context.Context, input model.ClinicalQueryInput) (*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: CreateClinicalQuery - createClinicalQuery"))
}

// ProcessClinicalQuery is the resolver for the processClinicalQuery field.
func (r *mutationResolver) ProcessClinicalQuery(ctx context.Context, id string) (*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ProcessClinicalQuery - processClinicalQuery"))
}

// ToggleFavoriteClinicalQuery is the resolver for the toggleFavoriteClinicalQuery field.
func (r *mutationResolver) ToggleFavoriteClinicalQuery(ctx context.Context, id string) (*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ToggleFavoriteClinicalQuery - toggleFavoriteClinicalQuery"))
}

// ProvideFeedback is the resolver for the provideFeedback field.
func (r *mutationResolver) ProvideFeedback(ctx context.Context, id string, feedback string) (*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ProvideFeedback - provideFeedback"))
}

// DeleteClinicalQuery is the resolver for the deleteClinicalQuery field.
func (r *mutationResolver) DeleteClinicalQuery(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteClinicalQuery - deleteClinicalQuery"))
}

// AnalyzeClinicalData is the resolver for the analyzeClinicalData field.
func (r *mutationResolver) AnalyzeClinicalData(ctx context.Context, patientData string) (*model.ClinicalAnalysis, error) {
	panic(fmt.Errorf("not implemented: AnalyzeClinicalData - analyzeClinicalData"))
}

// AnswerClinicalQuestion is the resolver for the answerClinicalQuestion field.
func (r *mutationResolver) AnswerClinicalQuestion(ctx context.Context, analysisState model.ClinicalAnalysisInput, question string) (string, error) {
	panic(fmt.Errorf("not implemented: AnswerClinicalQuestion - answerClinicalQuestion"))
}

// AddTestResult is the resolver for the addTestResult field.
func (r *mutationResolver) AddTestResult(ctx context.Context, patientID string, input model.TestResultInput) (*model.TestResult, error) {
	panic(fmt.Errorf("not implemented: AddTestResult - addTestResult"))
}

// UpdateTestResult is the resolver for the updateTestResult field.
func (r *mutationResolver) UpdateTestResult(ctx context.Context, id string, input model.TestResultInput) (*model.TestResult, error) {
	panic(fmt.Errorf("not implemented: UpdateTestResult - updateTestResult"))
}

// DeleteTestResult is the resolver for the deleteTestResult field.
func (r *mutationResolver) DeleteTestResult(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTestResult - deleteTestResult"))
}

// HealthCheck is the resolver for the healthCheck field.
func (r *queryResolver) HealthCheck(ctx context.Context) (*model.HealthStatus, error) {
	panic(fmt.Errorf("not implemented: HealthCheck - healthCheck"))
}

// Patient is the resolver for the patient field.
func (r *queryResolver) Patient(ctx context.Context, id string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: Patient - patient"))
}

// AllPatients is the resolver for the allPatients field.
func (r *queryResolver) AllPatients(ctx context.Context) ([]*model.Patient, error) {
	panic(fmt.Errorf("not implemented: AllPatients - allPatients"))
}

// PatientsByFilter is the resolver for the patientsByFilter field.
func (r *queryResolver) PatientsByFilter(ctx context.Context, status *string, psychologist *string) ([]*model.Patient, error) {
	panic(fmt.Errorf("not implemented: PatientsByFilter - patientsByFilter"))
}

// ClinicalQuery is the resolver for the clinicalQuery field.
func (r *queryResolver) ClinicalQuery(ctx context.Context, id string) (*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ClinicalQuery - clinicalQuery"))
}

// ClinicalQueriesByPatient is the resolver for the clinicalQueriesByPatient field.
func (r *queryResolver) ClinicalQueriesByPatient(ctx context.Context, patientID string) ([]*model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ClinicalQueriesByPatient - clinicalQueriesByPatient"))
}

// ClinicalAnalysis is the resolver for the clinicalAnalysis field.
func (r *queryResolver) ClinicalAnalysis(ctx context.Context, patientID string) (*model.ClinicalAnalysis, error) {
	panic(fmt.Errorf("not implemented: ClinicalAnalysis - clinicalAnalysis"))
}

// TestResult is the resolver for the testResult field.
func (r *queryResolver) TestResult(ctx context.Context, id string) (*model.TestResult, error) {
	panic(fmt.Errorf("not implemented: TestResult - testResult"))
}

// TestResultsByPatient is the resolver for the testResultsByPatient field.
func (r *queryResolver) TestResultsByPatient(ctx context.Context, patientID string) ([]*model.TestResult, error) {
	panic(fmt.Errorf("not implemented: TestResultsByPatient - testResultsByPatient"))
}

// AvailableModels is the resolver for the availableModels field.
func (r *queryResolver) AvailableModels(ctx context.Context) ([]string, error) {
	panic(fmt.Errorf("not implemented: AvailableModels - availableModels"))
}

// ClinicalQueryStatusChanged is the resolver for the clinicalQueryStatusChanged field.
func (r *subscriptionResolver) ClinicalQueryStatusChanged(ctx context.Context, patientID *string) (<-chan *model.ClinicalQuery, error) {
	panic(fmt.Errorf("not implemented: ClinicalQueryStatusChanged - clinicalQueryStatusChanged"))
}

// NewPatientAdded is the resolver for the newPatientAdded field.
func (r *subscriptionResolver) NewPatientAdded(ctx context.Context) (<-chan *model.Patient, error) {
	panic(fmt.Errorf("not implemented: NewPatientAdded - newPatientAdded"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
